branches:
  except:
    - /^.*appveyor.*$/
    - /^devel$/

notifications:
  irc:
    channels:
      - "chat.freenode.net#yarpers"
    template:
      - "%{repository}/%{branch} (%{commit} - %{author}): %{build_url}: %{message}"
    use_notice: true
    skip_join: true
  slack:
    secure: PFCRF5GqjLKAghKHz+Dl2yOlRM5Ud8uI8s4AvshsHVmW4VNDhJfLzi3cGqWGjptZ2CBSMSrd5noANQCfeKObqwpeW3na8vrEO/l0RrgqV0idpiDOMotSRbCTB6I7DNKL31ZsQ4qm7eOroWlauNSiC+CBLmwShE9+N2zWC25JXSo=

stages:
  - check
  - cmake
  - test
  - test-long

env:
  global:
    - TRAVIS_CMAKE_GENERATOR="Unix Makefiles"
    - TRAVIS_BUILD_TYPE=Release
    # Force ccache to build the original cpp file instead of the pre-processed file
    - CCACHE_CPP2=yes
    # CMake/CTest variables
    - CTEST_OUTPUT_ON_FAILURE=1
    - CLICOLOR_FORCE=1
    # Port 10010 is used by docker-containerd on travis-bionic
    # See also https://travis-ci.community/t/port-10010-is-used-by-docker-containerd/3865
    - YARP_PORT_RANGE=20000

git:
  depth: 100
  quiet: true

.linux_system_info_definition: &linux_system_info_cmd |-
  # Print some more system information after installing all build tools
  uname -a
  lsb_release -a
  cat /etc/apt/sources.list
  ls -la --color=always /etc/apt/sources.list.d
  which cmake
  cmake --version
  which $CC
  $CC --version
  which $CXX
  $CXX --version
  which ccache
  ccache --version
  ccache -s
  ls -la --color=always /usr/lib/ccache
  ls -la --color=always ${HOME}/lib/ccache || true
  which swig3.0
  swig3.0 -version
  which javac
  javac -version
  sudo netstat -tulpn
  env


.osx_system_info_definition: &osx_system_info_cmd |-
  # Print some more system information after installing all build tools
  uname -a
  system_profiler SPSoftwareDataType
  which cmake
  cmake --version
  which $CC
  $CC --version
  which $CXX
  $CXX --version
  which ccache
  ccache --version
  ccache -s
  which javac
  javac -version
  env

.stop_docker_cmd_definition: &stop_docker_cmd |-
  # Stop docker service
  sudo service docker stop

.prepare_build_dir_cmd_definition: &prepare_build_dir_cmd |-
  # Prepare build directory
  mkdir -p build

.export_cmake_options_base_cmd_definition: &export_cmake_options_base_cmd |-
  # Prepare cmake options
  export YARP_INSTALL_PREFIX="${PWD}/install"
  export YARP_CMAKE_OPTIONS="${CMAKE_OPTIONS} -C${PWD}/.ci/initial-cache.appveyor.cmake -DCMAKE_INSTALL_PREFIX=${YARP_INSTALL_PREFIX}"

.export_cmake_options_linux_cmd_definition: &export_cmake_options_linux_cmd |-
  # export_cmake_options_linux_cmd
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DENABLE_yarpcar_h264:BOOL=ON"
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DENABLE_yarpmod_usbCamera:BOOL=ON -DENABLE_yarpmod_usbCameraRaw:BOOL=ON"
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DENABLE_yarpmod_ffmpeg_grabber:BOOL=ON -DENABLE_yarpmod_ffmpeg_writer:BOOL=ON"
  #- export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DENABLE_yarpmod_portaudio:BOOL=ON -DENABLE_yarpmod_portaudioPlayer:BOOL=ON -DENABLE_yarpmod_portaudioRecorder:BOOL=ON"
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DENABLE_yarpmod_opencv_grabber:BOOL=ON"

.export_cmake_options_linux_gcc_cmd_definition: &export_cmake_options_linux_gcc_cmd |-
  # export_cmake_options_linux_gcc_cmd
  # Build rplidar2 on linux
  # FIXME gcc only, see https://github.com/robotology/yarp/issues/1984
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DENABLE_yarpmod_rpLidar2:BOOL=ON"

.export_cmake_options_linux_clang_cmd_definition: &export_cmake_options_linux_clang_cmd |-
  # export_cmake_options_linux_clang_cmd
  # Nothing to do

.export_cmake_options_osx_cmd_definition: &export_cmake_options_osx_cmd |-
  # export_cmake_options_osx_cmd
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DENABLE_yarpmod_opencv_grabber:BOOL=OFF"
  # Avoid building Qt5 guis twice on macOS.
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DYARP_DISABLE_OSX_BUNDLES:BOOL=ON"
  # Disable system SQLite (workaround for #2247)
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DYARP_USE_SYSTEM_SQLite:BOOL=OFF"

.export_cmake_options_skip_ace_cmd_definition: &export_cmake_options_skip_ace_cmd |-
  # export_cmake_options_skip_ace_cmd_definition
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DSKIP_ACE:BOOL=ON"

.export_cmake_options_skip_math_cmd_definition: &export_cmake_options_skip_math_cmd |-
  # export_cmake_options_skip_math_cmd
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DYARP_COMPILE_libYARP_math:BOOL=OFF"

.export_cmake_options_static_cmd_definition: &export_cmake_options_static_cmd |-
  # export_cmake_options_static_cmd
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DBUILD_SHARED_LIBS:BOOL=OFF"

.export_cmake_options_clean_api_cmd_definition: &export_cmake_options_clean_api_cmd |-
  # export_cmake_options_clean_api_cmd
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DYARP_CLEAN_API:BOOL=ON -DYARP_COMPILE_TESTS:BOOL=OFF"

.export_cmake_options_no_deprecated_cmd_definition: &export_cmake_options_no_deprecated_cmd |-
  # export_cmake_options_no_deprecated_cmd
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DYARP_NO_DEPRECATED:BOOL=ON"

.export_cmake_options_no_executables_cmd_definition: &export_cmake_options_no_executables_cmd |-
  # export_cmake_options_no_executables_cmd
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DYARP_COMPILE_EXECUTABLES:BOOL=OFF -DYARP_COMPILE_TESTS:BOOL=OFF"

.export_cmake_options_valgrind_cmd_definition: &export_cmake_options_valgrind_cmd |-
  # export_cmake_options_valgrind
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DYARP_VALGRIND_TESTS:BOOL=ON"
  ## These devices link to glib/gobject causing some memory leak on valgrind, therefore they are not enabled on valgrind builds
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DENABLE_yarpcar_h264:BOOL=OFF"
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DENABLE_yarpmod_usbCamera:BOOL=OFF -DENABLE_yarpmod_usbCameraRaw:BOOL=OFF"
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DENABLE_yarpmod_ffmpeg_grabber:BOOL=OFF -DENABLE_yarpmod_ffmpeg_writer:BOOL=OFF"
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DENABLE_yarpmod_portaudio:BOOL=OFF -DENABLE_yarpmod_portaudioPlayer:BOOL=OFF -DENABLE_yarpmod_portaudioRecorder:BOOL=OFF"
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DENABLE_yarpmod_opencv_grabber:BOOL=OFF"

.export_cmake_options_disable_failing_tests_cmd_definition: &export_cmake_options_disable_failing_tests_cmd |-
  # export_cmake_options_disable_failing_tests_cmd
  # Disable unit tests that randomly fail due to race conditions.
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DYARP_DISABLE_FAILING_TESTS:BOOL=ON"

.export_cmake_options_enable_broken_tests_cmd_definition: &export_cmake_options_enable_broken_tests_cmd |-
  export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DYARP_ENABLE_BROKEN_TESTS:BOOL=ON"

.print_cmake_flags_cmd_definition: &print_cmake_flags_cmd |-
  # Print cmake flags
  echo "-G\"${TRAVIS_CMAKE_GENERATOR}\" -DCMAKE_BUILD_TYPE=${TRAVIS_BUILD_TYPE} ${YARP_CMAKE_OPTIONS}"

.run_cmake_cmd_definition: &run_cmake_cmd |-
  # Run CMake
  (cd build; cmake -G"${TRAVIS_CMAKE_GENERATOR}" -DCMAKE_BUILD_TYPE=${TRAVIS_BUILD_TYPE} ${YARP_CMAKE_OPTIONS} ..)

.print_cmake_cache_cmd_definition: &print_cmake_cache_cmd |-
  # Print cmake cache
  (cd build; cat CMakeCache.txt)

.build_yarp_cmd_definition: &build_yarp_cmd |-
  # Build yarp
  (cd build; cmake --build . --config ${TRAVIS_BUILD_TYPE}) || travis_terminate 1

.run_unit_tests_cmd_definition: &run_unit_tests_cmd |-
  # Run unit tests
  (cd build; ctest --build . -C ${TRAVIS_BUILD_TYPE} || ctest --build . -C ${TRAVIS_BUILD_TYPE} --rerun-failed) || travis_terminate 1

.install_yarp_cmd_definition: &install_yarp_cmd |-
  # Test installation
  (cd build; cmake --build . --config ${TRAVIS_BUILD_TYPE} --target install) || travis_terminate 1

.build_yarp_os_examples_cmd_definition: &build_yarp_os_examples_cmd |-
  # Build also the os examples
  mkdir example/os/build
  (cd example/os/build; cmake -G"${TRAVIS_CMAKE_GENERATOR}" -DCMAKE_BUILD_TYPE=${TRAVIS_BUILD_TYPE} -DYARP_DIR=${YARP_INSTALL_PREFIX}/lib/cmake/YARP ..) || travis_terminate 1
  (cd example/os/build; cmake --build . --config ${TRAVIS_BUILD_TYPE})

.build_bindings_from_build_cmd_definition: &build_bindings_from_build_cmd |-
  # Build bindings from build directory
  export YARP_BINDINGS_OPTIONS="-DYARP_COMPILE_BINDINGS:BOOL=ON -DCREATE_LUA:BOOL=ON -DCREATE_RUBY:BOOL=ON -DCREATE_PYTHON:BOOL=ON -DCREATE_TCL:BOOL=ON -DCREATE_JAVA:BOOL=ON -DCREATE_CSHARP:BOOL=ON -DCREATE_PERL:BOOL=ON"
  (cd build; cmake -G"${TRAVIS_CMAKE_GENERATOR}" -DCMAKE_BUILD_TYPE=${TRAVIS_BUILD_TYPE} ${YARP_CMAKE_OPTIONS} ${YARP_BINDINGS_OPTIONS} ..) || travis_terminate 1
  (cd build; cmake --build . --config ${TRAVIS_BUILD_TYPE}) || travis_terminate 1
  (cd build; ctest --build . -C ${TRAVIS_BUILD_TYPE} -R bindings) || travis_terminate 1

.build_bindings_from_install_cmd_definition: &build_bindings_from_install_cmd |-
  # Build bindings from yarp installation
  mkdir -p "${PWD}/install/share/yarp/bindings/build"
  (cd "${PWD}/install/share/yarp/bindings/build" && cmake -G"${TRAVIS_CMAKE_GENERATOR}" -DCMAKE_BUILD_TYPE=${TRAVIS_BUILD_TYPE} -DYARP_DIR=${YARP_INSTALL_PREFIX}/lib/cmake/YARP ${YARP_BINDINGS_OPTIONS} ..) || travis_terminate 1
  (cd "${PWD}/install/share/yarp/bindings/build" && cmake --build . --config ${TRAVIS_BUILD_TYPE}) || travis_terminate 1

.addons_base_definition:
  addons: &addons_base
    apt: &addons_apt_base
      update: true
      sources:
        - sourceline: 'ppa:robotology/ppa'
        - sourceline: 'deb https://apt.kitware.com/ubuntu/ bionic main'
          key_url: 'https://apt.kitware.com/keys/kitware-archive-latest.asc'
        #- ubuntu-toolchain-r-test
        #- llvm-toolchain-bionic-8
      packages: &apt_packages_common
        # Build tools
        - cmake
        - ccache
        # Robotology dependencies
        - ycm-cmake-modules
        - librobottestingframework-dev
        # Libraries
        - libsqlite3-dev
        - libtinyxml-dev
        - libedit-dev
        - qtbase5-dev
        - qtdeclarative5-dev
        - qtmultimedia5-dev
        - libqt5opengl5-dev
        - libqcustomplot-dev
        - libopencv-dev
        - libeigen3-dev
        - libgraphviz-dev
        - libgstreamer1.0-dev
        - libgstreamer-plugins-base1.0-dev
        - libpng-dev
        - libv4l-dev
        - libavcodec-dev
        - libavdevice-dev
        - libavformat-dev
        - libavutil-dev
        - portaudio19-dev
      .apt_packages_ace_definition: &apt_packages_ace
        - libace-dev
      .apt_packages_bindings_definition: &apt_packages_bindings
        # Bindings
        - swig3.0
        # C# bindings
        - mono-mcs
        # Lua bindings
        - liblua5.3-dev
        - lua5.3
        # TCL/TK bindings
        - tcl-dev
        - tk-dev
        # Python bindings
        - python3-dev
        # Octave bindings
        - liboctave-dev
        # Java bindings
        - default-jdk
        # Ruby bindings
        - ruby-dev
        - ruby
        # Perl bindings and license check
        - perl
      .apt_packages_linux_gcc_definition: &apt_packages_linux_gcc
        - gcc-8
        - g++-8
      .apt_packages_linux_clang_definition: &apt_packages_linux_clang
        - clang-8
      .apt_packages_ninja_definition: &apt_packages_ninja
        - ninja-build
      .apt_packages_valgrind_definition: &apt_packages_valgrind
        - valgrind
      .apt_packages_coverage_definition: &apt_packages_coverage
        - lcov
    homebrew: &addons_homebrew_base
      update: true
      taps:
        - robotology/homebrew-formulae
      packages:
        # Build tools
        - ccache
        # Robotology dependencies
        - ycm
        # Libraries
        - ace
        - sqlite
        - tinyxml
        - libedit
        - qt5
        - opencv
        - eigen
        - graphviz
        - libpng

.cmake_configure_definition: &cmake_configure_template
  os: linux
  dist: bionic
  language: generic
  services:
    - docker
  before_install:
    - docker pull drdanz/ycm:cmake-${TRAVIS_CMAKE_VERSION}_ycm-${TRAVIS_YCM_VERSION}
    - >-
      docker run -it -d \
        -v $TRAVIS_BUILD_DIR:$TRAVIS_BUILD_DIR \
        -v $HOME/.ccache:$HOME/.ccache \
        -w $TRAVIS_BUILD_DIR \
        --name yarp-builder \
        drdanz/ycm:cmake-${TRAVIS_CMAKE_VERSION}_ycm-${TRAVIS_YCM_VERSION}
    - >-
    - docker exec -it yarp-builder cmake --version
    - docker exec -it yarp-builder mkdir $TRAVIS_BUILD_DIR/build
  install: skip
  before_script: skip
  script:
    - docker exec -it yarp-builder sh -c "cd $TRAVIS_BUILD_DIR/build; cmake .. -DSKIP_ACE=ON"
  after_success: skip

.linux_base_build_definition: &linux_base_build_template
  os: linux
  dist: bionic
  language: cpp
  compiler: gcc
  cache:
    ccache: true
  install: skip
  script:
    - *build_yarp_cmd
    - *run_unit_tests_cmd
    - *install_yarp_cmd
    - *build_yarp_os_examples_cmd
    - *build_bindings_from_build_cmd
    - *build_bindings_from_install_cmd
  after_success: skip

.linux_gcc_build_definition: &linux_gcc_build_template
  <<: *linux_base_build_template
  addons:
    apt:
      <<: *addons_apt_base
      packages:
        - *apt_packages_common
        - *apt_packages_ace
        - *apt_packages_linux_gcc
        - *apt_packages_bindings
  .force_gcc_cmd_definition: &force_gcc_cmd |-
    # Force gcc-8
    export CC=gcc-8
    export CXX=g++-8
  before_install:
    - *stop_docker_cmd
    - *force_gcc_cmd
    - *linux_system_info_cmd
  before_script:
    - *prepare_build_dir_cmd
    - *export_cmake_options_base_cmd
    - *export_cmake_options_linux_cmd
    - *export_cmake_options_linux_gcc_cmd
    - *print_cmake_flags_cmd
    - *run_cmake_cmd
    - *print_cmake_cache_cmd

.linux_clang_build_definition: &linux_clang_build_template
  <<: *linux_base_build_template
  addons:
    apt:
      <<: *addons_apt_base
      packages:
        - *apt_packages_common
        - *apt_packages_ace
        - *apt_packages_linux_clang
        - *apt_packages_bindings
  .force_clang_cmd_definition: &force_clang_cmd |-
    # Remove default clang from path
    export PATH=$(echo $PATH | sed -e 's/\/usr\/local\/clang[^:]\+://')
    # Force clang-8
    export CC=clang-8
    export CXX=clang++-8
    # Use ccache also for clang and clang++ on linux
    mkdir -p ${HOME}/lib/ccache
    ln -s /usr/bin/ccache ${HOME}/lib/ccache/clang
    ln -s /usr/bin/ccache ${HOME}/lib/ccache/clang++
    ln -s /usr/bin/ccache ${HOME}/lib/ccache/clang-8
    ln -s /usr/bin/ccache ${HOME}/lib/ccache/clang++-8
    export PATH=${HOME}/lib/ccache:${PATH}
  before_install:
    - *stop_docker_cmd
    - *force_clang_cmd
    - *linux_system_info_cmd
  before_script:
    - *prepare_build_dir_cmd
    - *export_cmake_options_base_cmd
    - *export_cmake_options_linux_cmd
    - *export_cmake_options_linux_clang_cmd
    - *print_cmake_flags_cmd
    - *run_cmake_cmd
    - *print_cmake_cache_cmd

.osx_build_definition: &osx_build_template
  os: osx
  osx_image: xcode9.4
  language: cpp
  compiler: clang
  cache:
    ccache: true
    directories:
      - $HOME/Library/Caches/Homebrew
  addons:
    homebrew:
      <<: *addons_homebrew_base
  .osx_enable_ccache_cmd_definition: &osx_enable_ccache_cmd |-
    # Enable ccache on osx
    export PATH="/usr/local/opt/ccache/libexec:$PATH"
  .osx_enable_qt5_cmd_definition: &osx_enable_qt5_cmd |-
    # Enable automatic Qt5 detection on osx
    export Qt5_DIR="/usr/local/opt/qt5/lib/cmake/Qt5"
  before_install:
    - *osx_enable_ccache_cmd
    - *osx_system_info_cmd
  install:
    - *osx_enable_qt5_cmd
  before_script:
    - *prepare_build_dir_cmd
    - *export_cmake_options_base_cmd
    - *export_cmake_options_osx_cmd
    - *export_cmake_options_disable_failing_tests_cmd
    - *print_cmake_flags_cmd
    - *run_cmake_cmd
    - *print_cmake_cache_cmd
  script:
    - *build_yarp_cmd
    - *run_unit_tests_cmd
  after_success: skip

matrix:
  fast_finish: true
  include:

    - stage: check
      name: "Style check"
      os: linux
      dist: bionic
      language: generic
      addons:
        apt:
          packages:
            - perl
      before_install: skip
      before_script: skip
      script: tests/misc/check_style.pl
      after_success: skip

    - stage: check
      name: "License check"
      os: linux
      dist: bionic
      language: generic
      addons:
        apt:
          packages:
            - perl
      before_install: skip
      before_script: skip
      script: tests/misc/check_license.pl
      after_success: skip

    - stage: cmake
      <<: *cmake_configure_template
      name: "Configure using CMake 3.12 and YCM 0.11.0"
      env:
        - TRAVIS_CMAKE_VERSION="3.12"
        - TRAVIS_YCM_VERSION="0.11.0"

    - stage: cmake
      <<: *cmake_configure_template
      name: "Configure using CMake 3.13 and YCM 0.11.0"
      env:
        - TRAVIS_CMAKE_VERSION="3.13"
        - TRAVIS_YCM_VERSION="0.11.0"

    - stage: cmake
      <<: *cmake_configure_template
      name: "Configure using CMake 3.14 and YCM 0.11.0"
      env:
        - TRAVIS_CMAKE_VERSION="3.14"
        - TRAVIS_YCM_VERSION="0.11.0"

    - stage: cmake
      <<: *cmake_configure_template
      name: "Configure using CMake 3.15 and YCM 0.11.0"
      env:
        - TRAVIS_CMAKE_VERSION="3.15"
        - TRAVIS_YCM_VERSION="0.11.0"

    - stage: cmake
      <<: *cmake_configure_template
      name: "Configure using CMake 3.16 and YCM 0.11.0"
      env:
        - TRAVIS_CMAKE_VERSION="3.16"
        - TRAVIS_YCM_VERSION="0.11.0"

    - stage: test
      <<: *linux_gcc_build_template
      name: "Standard build (linux, gcc)"

    - stage: test
      <<: *linux_clang_build_template
      name: "Standard build (linux, clang)"

    - stage: test
      <<: *linux_gcc_build_template
      name: "No ACE build (linux, gcc)"
      addons:
        apt:
          <<: *addons_apt_base
          packages:
            - *apt_packages_common
            - *apt_packages_linux_gcc
            - *apt_packages_bindings
      before_script:
        - *prepare_build_dir_cmd
        - *export_cmake_options_base_cmd
        - *export_cmake_options_linux_cmd
        - *export_cmake_options_linux_gcc_cmd
        - *export_cmake_options_skip_ace_cmd
        - *print_cmake_flags_cmd
        - *run_cmake_cmd
        - *print_cmake_cache_cmd

    - stage: test
      <<: *linux_clang_build_template
      name: "No ACE build (linux, clang)"
      addons:
        apt:
          <<: *addons_apt_base
          packages:
            - *apt_packages_common
            - *apt_packages_linux_clang
            - *apt_packages_bindings
      before_script:
        - *prepare_build_dir_cmd
        - *export_cmake_options_base_cmd
        - *export_cmake_options_linux_cmd
        - *export_cmake_options_linux_clang_cmd
        - *export_cmake_options_skip_ace_cmd
        - *print_cmake_flags_cmd
        - *run_cmake_cmd
        - *print_cmake_cache_cmd

    - stage: test
      <<: *linux_gcc_build_template
      name: "No YARP_math build (linux, gcc) - bindings disabled"
      addons:
        apt:
          <<: *addons_apt_base
          packages:
            - *apt_packages_common
            - *apt_packages_ace
            - *apt_packages_linux_gcc
      before_script:
        - *prepare_build_dir_cmd
        - *export_cmake_options_base_cmd
        - *export_cmake_options_linux_cmd
        - *export_cmake_options_linux_gcc_cmd
        - *export_cmake_options_skip_math_cmd
        - *print_cmake_flags_cmd
        - *run_cmake_cmd
        - *print_cmake_cache_cmd
      script:
        - *build_yarp_cmd
        - *run_unit_tests_cmd
        - *install_yarp_cmd
        - *build_yarp_os_examples_cmd

    - stage: test
      <<: *linux_clang_build_template
      name: "No YARP_math build (linux, clang) - bindings disabled"
      addons:
        apt:
          <<: *addons_apt_base
          packages:
            - *apt_packages_common
            - *apt_packages_ace
            - *apt_packages_linux_clang
      before_script:
        - *prepare_build_dir_cmd
        - *export_cmake_options_base_cmd
        - *export_cmake_options_linux_cmd
        - *export_cmake_options_linux_clang_cmd
        - *export_cmake_options_skip_math_cmd
        - *print_cmake_flags_cmd
        - *run_cmake_cmd
        - *print_cmake_cache_cmd
      script:
        - *build_yarp_cmd
        - *run_unit_tests_cmd
        - *install_yarp_cmd
        - *build_yarp_os_examples_cmd

    - stage: test
      <<: *linux_gcc_build_template
      name: "Standard build with CLEAN_API (linux, gcc) - unit tests and bindings disabled"
      addons:
        apt:
          <<: *addons_apt_base
          packages:
            - *apt_packages_common
            - *apt_packages_ace
            - *apt_packages_linux_gcc
      before_script:
        - *prepare_build_dir_cmd
        - *export_cmake_options_base_cmd
        - *export_cmake_options_linux_cmd
        - *export_cmake_options_linux_gcc_cmd
        - *export_cmake_options_clean_api_cmd
        - *print_cmake_flags_cmd
        - *run_cmake_cmd
        - *print_cmake_cache_cmd
      script:
        - *build_yarp_cmd
        - *install_yarp_cmd
        - *build_yarp_os_examples_cmd

    - stage: test
      <<: *linux_clang_build_template
      name: "Standard build with CLEAN_API (linux, clang) - unit tests and bindings disabled"
      addons:
        apt:
          <<: *addons_apt_base
          packages:
            - *apt_packages_common
            - *apt_packages_ace
            - *apt_packages_linux_clang
      before_script:
        - *prepare_build_dir_cmd
        - *export_cmake_options_base_cmd
        - *export_cmake_options_linux_cmd
        - *export_cmake_options_linux_clang_cmd
        - *export_cmake_options_clean_api_cmd
        - *print_cmake_flags_cmd
        - *run_cmake_cmd
        - *print_cmake_cache_cmd
      script:
        - *build_yarp_cmd
        - *install_yarp_cmd
        - *build_yarp_os_examples_cmd

    - stage: test
      <<: *linux_gcc_build_template
      name: "Static build (linux, gcc)"
      before_script:
        - *prepare_build_dir_cmd
        - *export_cmake_options_base_cmd
        - *export_cmake_options_linux_cmd
        - *export_cmake_options_linux_gcc_cmd
        - *export_cmake_options_static_cmd
        - *print_cmake_flags_cmd
        - *run_cmake_cmd
        - *print_cmake_cache_cmd

    - stage: test
      <<: *linux_clang_build_template
      name: "Static build (linux, clang)"
      before_script:
        - *prepare_build_dir_cmd
        - *export_cmake_options_base_cmd
        - *export_cmake_options_linux_cmd
        - *export_cmake_options_linux_clang_cmd
        - *export_cmake_options_static_cmd
        - *print_cmake_flags_cmd
        - *run_cmake_cmd
        - *print_cmake_cache_cmd

    - stage: test
      <<: *linux_gcc_build_template
      name: "Static build, no ACE (linux, gcc) - bindings disabled"
      addons:
        apt:
          <<: *addons_apt_base
          packages:
            - *apt_packages_common
            - *apt_packages_linux_gcc
      before_script:
        - *prepare_build_dir_cmd
        - *export_cmake_options_base_cmd
        - *export_cmake_options_linux_cmd
        - *export_cmake_options_linux_gcc_cmd
        - *export_cmake_options_skip_ace_cmd
        - *export_cmake_options_static_cmd
        - *print_cmake_flags_cmd
        - *run_cmake_cmd
        - *print_cmake_cache_cmd
      script:
        - *build_yarp_cmd
        - *run_unit_tests_cmd
        - *install_yarp_cmd
        - *build_yarp_os_examples_cmd

    - stage: test
      <<: *linux_clang_build_template
      name: "Static build, no ACE (linux, clang) - bindings disabled"
      addons:
        apt:
          <<: *addons_apt_base
          packages:
            - *apt_packages_common
            - *apt_packages_linux_clang
      before_script:
        - *prepare_build_dir_cmd
        - *export_cmake_options_base_cmd
        - *export_cmake_options_linux_cmd
        - *export_cmake_options_linux_clang_cmd
        - *export_cmake_options_skip_ace_cmd
        - *export_cmake_options_static_cmd
        - *print_cmake_flags_cmd
        - *run_cmake_cmd
        - *print_cmake_cache_cmd
      script:
        - *build_yarp_cmd
        - *run_unit_tests_cmd
        - *install_yarp_cmd
        - *build_yarp_os_examples_cmd

    - stage: test
      <<: *linux_gcc_build_template
      name: "Standard build no deprecated (linux, gcc)"
      before_script:
        - *prepare_build_dir_cmd
        - *export_cmake_options_base_cmd
        - *export_cmake_options_linux_cmd
        - *export_cmake_options_linux_gcc_cmd
        - *export_cmake_options_no_deprecated_cmd
        - *print_cmake_flags_cmd
        - *run_cmake_cmd
        - *print_cmake_cache_cmd

    - stage: test
      <<: *linux_clang_build_template
      name: "Standard build no deprecated (linux, clang)"
      before_script:
        - *prepare_build_dir_cmd
        - *export_cmake_options_base_cmd
        - *export_cmake_options_linux_cmd
        - *export_cmake_options_linux_clang_cmd
        - *export_cmake_options_no_deprecated_cmd
        - *print_cmake_flags_cmd
        - *run_cmake_cmd
        - *print_cmake_cache_cmd

    - stage: test
      <<: *linux_gcc_build_template
      name: "No-executables build (linux, gcc) - unit tests disabled"
      before_script:
        - *prepare_build_dir_cmd
        - *export_cmake_options_base_cmd
        - *export_cmake_options_linux_cmd
        - *export_cmake_options_linux_gcc_cmd
        - *export_cmake_options_no_executables_cmd
        - *print_cmake_flags_cmd
        - *run_cmake_cmd
        - *print_cmake_cache_cmd
      script:
        - *build_yarp_cmd
        - *install_yarp_cmd
        - *build_yarp_os_examples_cmd
        - *build_bindings_from_build_cmd
        - *build_bindings_from_install_cmd

    - stage: test
      <<: *linux_clang_build_template
      name: "No-executables build (linux, clang) - unit tests disabled"
      before_script:
        - *prepare_build_dir_cmd
        - *export_cmake_options_base_cmd
        - *export_cmake_options_linux_cmd
        - *export_cmake_options_linux_clang_cmd
        - *export_cmake_options_no_executables_cmd
        - *print_cmake_flags_cmd
        - *run_cmake_cmd
        - *print_cmake_cache_cmd
      script:
        - *build_yarp_cmd
        - *install_yarp_cmd
        - *build_yarp_os_examples_cmd
        - *build_bindings_from_build_cmd
        - *build_bindings_from_install_cmd

    - stage: test
      <<: *linux_gcc_build_template
      name: "Standard build with Ninja generator (linux, gcc)"
      addons:
        apt:
          <<: *addons_apt_base
          packages:
            - *apt_packages_common
            - *apt_packages_ace
            - *apt_packages_linux_gcc
            - *apt_packages_bindings
            - *apt_packages_ninja
      env:
        - TRAVIS_CMAKE_GENERATOR="Ninja"

    - stage: test
      <<: *linux_clang_build_template
      name: "Standard build with Ninja generator (linux, clang)"
      addons:
        apt:
          <<: *addons_apt_base
          packages:
            - *apt_packages_common
            - *apt_packages_ace
            - *apt_packages_linux_clang
            - *apt_packages_bindings
            - *apt_packages_ninja
      env:
        - TRAVIS_CMAKE_GENERATOR="Ninja"

    - stage: test-long
      <<: *linux_gcc_build_template
      name: "Standard build with valgrind (linux, gcc) - bindings and failing tests disabled"
      env:
       - TRAVIS_BUILD_TYPE=Debug
      addons:
        apt:
          <<: *addons_apt_base
          packages:
            - *apt_packages_common
            - *apt_packages_linux_gcc
            - *apt_packages_ace
            - *apt_packages_valgrind
      before_script:
        - *prepare_build_dir_cmd
        - *export_cmake_options_base_cmd
        - *export_cmake_options_linux_cmd
        - *export_cmake_options_linux_gcc_cmd
        - *export_cmake_options_valgrind_cmd
        - *export_cmake_options_disable_failing_tests_cmd
        - *print_cmake_flags_cmd
        - *run_cmake_cmd
        - *print_cmake_cache_cmd
      script:
        - *build_yarp_cmd
        - *run_unit_tests_cmd
        - *install_yarp_cmd
        - *build_yarp_os_examples_cmd

    - stage: test-long
      <<: *linux_gcc_build_template
      name: "No ACE build with valgrind (linux, gcc) - bindings and failing tests disabled"
      env:
       - TRAVIS_BUILD_TYPE=Debug
      addons:
        apt:
          <<: *addons_apt_base
          packages:
            - *apt_packages_common
            - *apt_packages_linux_gcc
            - *apt_packages_valgrind
      before_script:
        - *prepare_build_dir_cmd
        - *export_cmake_options_base_cmd
        - *export_cmake_options_linux_cmd
        - *export_cmake_options_linux_gcc_cmd
        - *export_cmake_options_skip_ace_cmd
        - *export_cmake_options_valgrind_cmd
        - *export_cmake_options_disable_failing_tests_cmd
        - *print_cmake_flags_cmd
        - *run_cmake_cmd
        - *print_cmake_cache_cmd
      script:
        - *build_yarp_cmd
        - *run_unit_tests_cmd
        - *install_yarp_cmd
        - *build_yarp_os_examples_cmd

    - stage: test-long
      <<: *osx_build_template
      name: "Standard build (osx, xcode11.3, clang) - installation, examples, bindings and failing tests disabled"
      osx_image: xcode11.3

    - stage: test-long
      <<: *osx_build_template
      name: "Standard build with Xcode (osx, xcode11.3, clang) - installation, examples, bindings and failing tests disabled"
      osx_image: xcode11.3
      env:
        - TRAVIS_CMAKE_GENERATOR="Xcode"

#    - stage: test-long
#      <<: *linux_gcc_build_template
#      name: "Standard build with integration tests (linux, gcc)"
#      addons:
#        apt:
#          <<: *addons_apt_base
#          sources:
#            - sourceline: 'ppa:robotology/ppa'
#            #- ubuntu-toolchain-r-test
#            #- llvm-toolchain-bionic-8
#            - sourceline: 'deb http://packages.ros.org/ros/ubuntu bionic main'
#              key_url: 'http://packages.ros.org/ros.key'
#          packages:
#            - *apt_packages_common
#            - *apt_packages_ace
#            - *apt_packages_linux_clang
#            - *apt_packages_bindings
#            - ros-melodic-desktop-full
#      env:
#        # ROS-related environment variables.
#        - ROS_HOSTNAME=localhost
#        - ROS_MASTER_URI=http://localhost:11311
#        - ROBOT=sim
#      install:
#        ## Install swig stuff
#        - wget https://github.com/robotology-dependencies/swigs/releases/download/v0.0.7/swigs.zip -O /tmp/swigs.zip
#        - unzip -q /tmp/swigs.zip
#        - mkdir -p build/cache
#        - mv swigs cache/swig
#        - ln -s ../cache build/cache
#        ## Init ROS
#        - source /opt/ros/melodic/setup.bash
#      before_script:
#        - *prepare_build_dir_cmd
#        - *export_cmake_options_base_cmd
#        - *export_cmake_options_linux_cmd
#        - *export_cmake_options_linux_gcc_cmd
#        - export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DYARP_ENABLE_INTEGRATION_TESTS:BOOL=ON"
#        - *print_cmake_flags_cmd
#        - *run_cmake_cmd
#        - *print_cmake_cache_cmd
#      script:
#        - *build_yarp_cmd
#        - build/bin/yarp conf 0 0 local
#        - *run_unit_tests_cmd
#        - *install_yarp_cmd
#        - *build_yarp_os_examples_cmd
#        - *build_bindings_from_build_cmd
#        - *build_bindings_from_install_cmd
#
#    - stage: test-long
#      <<: *linux_gcc_build_template
#      name: "Standard build with coverage (linux, gcc)"
#      addons:
#        apt:
#          <<: *addons_apt_base
#          packages:
#            - *apt_packages_common
#            - *apt_packages_linux_gcc
#            - *apt_packages_ace
#            - *apt_packages_bindings
#            - *apt_packages_coverage
#      env:
#        - TRAVIS_BUILD_TYPE=Profile
#      before_script:
#        - *prepare_build_dir_cmd
#        - *export_cmake_options_base_cmd
#        - *export_cmake_options_linux_cmd
#        - *export_cmake_options_linux_gcc_cmd
#        - *print_cmake_flags_cmd
#        - *run_cmake_cmd
#        - *print_cmake_cache_cmd
#        - (cd build; lcov --directory . --zerocounters)
#      after_success:
#        # Capture coverage info for Profile builds
#        - (cd build; lcov --directory . --capture --output-file coverage.info)
#        # Filter out system and test code
#        - (cd build; lcov --remove coverage.info '/usr/*' 'tests/*' 'example/*' 'extern/*' 'build/*' --output-file coverage.info)
#        # Debug before upload
#        - (cd build; lcov --list coverage.info)
#        # Uploads to coveralls
#        - (cd build; coveralls-lcov --source-encoding=ISO-8859-1 coverage.info)
#
#    - stage: test-long
#      <<: *linux_gcc_build_template
#      name: "Standard build with broken tests (linux, gcc)"
#      before_script:
#        - *prepare_build_dir_cmd
#        - *export_cmake_options_base_cmd
#        - *export_cmake_options_linux_cmd
#        - *export_cmake_options_linux_gcc_cmd
#        - *export_cmake_options_enable_broken_tests_cmd
#        - *print_cmake_flags_cmd
#        - *run_cmake_cmd
#        - *print_cmake_cache_cmd
#
#  allow_failure:
#    - name: "Standard build with broken tests (linux, gcc)"
